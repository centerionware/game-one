void inet_player::clientChunkPush(std::vector<std::string>&in) {
//	std::cout << "Initialize chunk push - deserialize\n";
	clientChunkPush_internal(in[0]);
}

void inet_player::clientChunkPush_internal(std::string& in, bool temporary_override) {
	heightmap_globals::mut_c.lock();
	std::cout << "Client chunk push\n";
	if(!admin && !temporary_override) {
		heightmap_globals::mut_c.unlock();
		return;
	}
	std::cout << "Admin, pushing chunk...\n";
	if(in.size() == 0) {
		std::cout << "Received empty chunk push..\n";
		heightmap_globals::mut_c.unlock();
	return;
	}
	bool is_new_chunk = false;
	basic_chunk_update bcu_n = basic_chunk_update::deserialize(in);
	basic_chunk &n = bcu_n.chunk;
//	std::cout << "Initialize chunk push - chunk_update\n";
//	NewHeightmapLoader::NewHeightmapLoader::get_instance()->chunk_update(chunklee);
//	std::cout << "Initialize chunk push - done\n";
	vec3 v(n.x,n.y,n.z);
	std::cout << v.print("Chunk position: ") << " with " << n.voxels.size() << " voxels." << std::endl;
	//Chunk *wo;
	//bool inserted = false;
	
	std::stringstream query;

		query << "start transaction";
		database_connection.query(query.str());
		query.str("");
		
		query << "select id from Chunks where X='" << n.x << "' and Y='" << n.y << "' and Z='" << n.z << "'";
		
		//"select X,Y,Z,id from Chunks, (max(timestamp) from Chunk_Voxels where chunkid = Chunks.id)";

		database_connection.query(query.str());
		size_t id = 0;
		if(database_connection.numrows == 0) { 
			// insert chunk, ? after verifying it's a valid position, ? 
			query.str("");
			query << "insert into Chunks (X,Y,Z) values ("<<n.x<<","<<n.y<<","<<n.z<<")";
			database_connection.query(query.str());
			id = database_connection.insertid;
			is_new_chunk = true;
			} else {
		    if(database_connection.numrows != 1) {
		     std::cout << "Multiple copies of the same table found! WTF\n";
		     heightmap_globals::mut_c.unlock();
		      return;
		    }
		//    int result_rows = database_connection.numrows;
		    
		    MYSQL_ROW& lmrow = database_connection.row();
		    unsigned long *lengths = mysql_fetch_lengths(database_connection.result());
		    id = fromstring<size_t>(lmrow[0],lengths[0]);
		    
		}
		if(id == 0) {
		 heightmap_globals::mut_c.unlock();
		  return; // error with the id!
		}
		std::cout << "Pushing to chunk " << id << std::endl;
		if(!is_new_chunk){
			is_new_chunk = true;
			std::vector<chunk_quick_cache::aChunk>::iterator im = chunk_quick_cache::ptr->chnks.begin(), eii = chunk_quick_cache::ptr->chnks.end();
			for(;im!=eii&&is_new_chunk;++im) {
				if( (*im).id == id) is_new_chunk = false;
			}
		}
		query.str("");
		query << "commit";
                database_connection.query(query.str());
                query.str("");

                query << "start transaction";
                database_connection.query(query.str());
                query.str("");

		for(size_t count = 0;count != n.voxels.size();++count) {
			query.str("");
			unsigned short j = n.voxels[count];
			unsigned short m = n.matids[count];
			
			query << "select chunk_id from Chunk_Voxels where voxid='"<<j<<"' and chunk_id='"<<id<<"'";
			database_connection.query(query.str());
			if(database_connection.numrows != 0) {
				query.str("");
				query <<"update Chunk_Voxels set matid='"<<m <<"' where voxid='"<<j <<"' and chunk_id='"<<id<<"'";
				database_connection.query(query.str());
			} else {
				query.str("");
				query<< "insert into Chunk_Voxels (voxid, matid, chunk_id) values ("<<j<<","<<m<<","<<id<<")";
				database_connection.query(query.str());
			}
		}
		for(size_t count = 0;count != bcu_n.removed_voxels.size();++count) {
			unsigned short j = bcu_n.removed_voxels[count];
			query.str("");
			
			query <<"delete from Chunk_Voxels where voxid=\""<<j<<"\" and chunk_id=\""<<id<<"\"";//, matid, chunk_id) values ("<<j<<","<<m<<","<<id<<")";
			database_connection.query(query.str());
		}
		
		{
		query.str("");
			query<< "select unix_timestamp(max(lastupdate)) from Chunk_Voxels where chunk_id ='"<<id<<"'";
		database_connection.query(query.str());
		if(database_connection.numrows != 1) return;
		    MYSQL_ROW& lmrow = database_connection.row();
		    unsigned long *lengths = mysql_fetch_lengths(database_connection.result());
		    size_t timestamp = fromstring<int>(lmrow[0],lengths[0]);
		    std::vector<chunk_quick_cache::aChunk>::iterator i = chunk_quick_cache::ptr->chnks.begin(), ie = chunk_quick_cache::ptr->chnks.end();
		      for(;i!=ie;++i) if((*i).id==id) {
			(*i).timestamp = timestamp ;
			break;
		      }
		}
		{
		query.str("");
		query<< "select unix_timestamp(max(lastupdate)) from RemovedVoxels where chunk_id ='"<<id<<"'";
		database_connection.query(query.str());
		if(database_connection.numrows != 1) return;
		    MYSQL_ROW& lmrow = database_connection.row();
		    unsigned long *lengths = mysql_fetch_lengths(database_connection.result());
		    size_t timestamp = fromstring<int>(lmrow[0],lengths[0]);
		    std::vector<chunk_quick_cache::aChunk>::iterator i = chunk_quick_cache::ptr->chnks.begin(), ie = chunk_quick_cache::ptr->chnks.end();
		      for(;i!=ie;++i) if((*i).id==id) {
			if(timestamp > (*i).timestamp) (*i).timestamp = timestamp ;
			break;
		      }
		}
		query.str("");	
		query << "commit";
		database_connection.query(query.str());

	  if(is_new_chunk) {

		  query.str("");
	  //                std::stringstream query;

			  query << "select X,Y,Z,id, (select  UNIX_TIMESTAMP(max(lastupdate)) from Chunk_Voxels where chunk_id = C.id) from Chunks as C where C.id ="<<id;

			  database_connection.query(query.str());
			  if(database_connection.numrows < 0) return;
			    MYSQL_ROW& mrow = database_connection.row();
			    unsigned long *lengths = mysql_fetch_lengths(database_connection.result());
			    chunk_quick_cache::aChunk c;
			    c.position.x = fromstring<float>(mrow[0],lengths[0]);
			    c.position.y = fromstring<float>(mrow[1],lengths[1]);
			    c.position.z = fromstring<float>(mrow[2],lengths[2]);
			    c.id = fromstring<size_t>(mrow[3],lengths[3]);
			    c.timestamp = fromstring<size_t>(mrow[4],lengths[4]);
			  chunk_quick_cache::ptr->chnks.push_back(c);
			  std::cout << "New chunk " << c.position.print("Position: ") << " id: " << c.id << " timestamp: " << c.timestamp << std::endl;
			  if(temporary_override) {
			      query.str("");
			      query << "insert into TemporaryChunks (chunk_id) values(" << id << ")";
			      database_connection.query(query.str());
			  }
	  }
	  if(!temporary_override) {
		  query.str("");
		  query << "delete from TemporaryChunks where chunk_id="<<id;
		  database_connection.query(query.str());
	  }
	  heightmap_globals::mut_c.unlock();
	   NewHeightmapLoader::get_instance()->chunk_update(bcu_n);
	  
	//chunk_quick_cache::ptr->reset();
		
}