
	OgreObjectWrapper::OgreObjectWrapper(const char *name, const char *group) : need_resize(true),need_iresize(true),curIntCnt(0),curIbufCount(0) {
		msh = Ogre::MeshManager::getSingleton().createManual(name, group);
		std::stringstream sm_name;
		sm_name << name << "_sm";
		sub = msh->createSubMesh(sm_name.str().c_str());
		sub->setMaterialName("VoxelTexture");
		rs = Ogre::Root::getSingleton().getRenderSystem();
		msh->sharedVertexData = new Ogre::VertexData();
		curIntCnt  =0;
		curIbufCount=0;
		_name = name;
		_group = group;
		entity_loaded = false;
		
	}
	OgreObjectWrapper::~OgreObjectWrapper() {
		Ogre::HardwareBufferManager::getSingleton()._notifyIndexBufferDestroyed(ibuf.get());
		Ogre::HardwareBufferManager::getSingleton()._notifyVertexBufferDestroyed(vibuf.get());
		Ogre::HardwareBufferManager::getSingleton()._notifyVertexBufferDestroyed(vbuf.get());
		Ogre::MeshManager::getSingleton().remove( msh.get()->getHandle());
	}

	void OgreObjectWrapper::create_ogre_object(unsigned int*faces,GOREAL*vertices,size_t nVertices,size_t ibufCount,Ogre::AxisAlignedBox &_bbox,Ogre::RGBA *colors, bool _export){
		if(nVertices >= curIntCnt) {
			curIntCnt = nVertices*2;
			need_resize = true;
		} else if(nVertices >3 && nVertices >= curIntCnt/3) {
			curIntCnt = nVertices*2;
			need_resize = true;
		} else {need_resize = false; }
		if(ibufCount >= curIbufCount) {
			curIbufCount = ibufCount*2;
			need_iresize=true;
		} else if(ibufCount >3 && ibufCount >= curIbufCount/3) {
			curIbufCount = ibufCount*2;
			need_iresize = true;
		} else {
			need_iresize=false;
		} 

		msh->sharedVertexData->vertexCount = nVertices;
		decl = msh->sharedVertexData->vertexDeclaration;
		size_t offset = 0;
		decl->addElement(0, offset, Ogre::VET_FLOAT3, Ogre::VES_POSITION);
		offset += Ogre::VertexElement::getTypeSize(Ogre::VET_FLOAT3);
		decl->addElement(0, offset, Ogre::VET_FLOAT3, Ogre::VES_NORMAL);
		offset += Ogre::VertexElement::getTypeSize(Ogre::VET_FLOAT3);
		//Ogre::HardwareBufferManager::getSingleton().destroyVertexBuffer(vbuf);}
		if(need_resize) 
		vbuf = Ogre::HardwareBufferManager::getSingleton().createVertexBuffer(offset, curIntCnt, Ogre::HardwareBuffer::HBU_STATIC_WRITE_ONLY);
		vbuf->writeData(0, sizeof(GOREAL)*nVertices, vertices, true);
		
		bind = msh->sharedVertexData->vertexBufferBinding;
		bind->setBinding(0, vbuf);
	//	cout << "Done assigning vertices and normals. Assigning colours." << endl;
		offset = 0;
		
		decl->addElement(1, offset, Ogre::VET_COLOUR, Ogre::VES_DIFFUSE);
		offset += Ogre::VertexElement::getTypeSize(Ogre::VET_COLOUR);
		//Ogre::HardwareBufferManager::getSingleton().destroyVertexBuffer(vibuf);}
		if(need_resize)
		vibuf = Ogre::HardwareBufferManager::getSingleton().createVertexBuffer(
		offset, curIntCnt/6, Ogre::HardwareBuffer::HBU_STATIC_WRITE_ONLY);
		vibuf->writeData(0, sizeof(Ogre::RGBA)*(nVertices/6), colors, true);
		bind->setBinding(1, vibuf);
		
// 	//	cout << "Done assigning colours. Assigning faces."<<endl;
		if(need_iresize)
		ibuf = Ogre::HardwareBufferManager::getSingleton().
		  createIndexBuffer(Ogre::HardwareIndexBuffer::IT_32BIT, curIbufCount, Ogre::HardwareBuffer::HBU_STATIC_WRITE_ONLY);
		    
		ibuf->writeData(0, sizeof(unsigned int)*ibufCount, faces, true);
	//	cout << "Done assigning faces." << endl;
		sub->useSharedVertices = true;
		sub->indexData->indexBuffer = ibuf;
		sub->indexData->indexCount = ibufCount;
		sub->indexData->indexStart = 0;
		//cout << "Done assigning information to ogre mesh object. Settings bounds and loading mesh." << endl;
		msh->_setBounds(_bbox);
		msh->load();
	}
  

//OgreObjectWrapper *OgreObjectWrapper::_stinstance = NULL;