
INET_CALLBACK(InventoryCommand, WearItem) { 
      if(player.admin) {
	  if(in[0].size() >= 4) {
		unsigned int itemid;
		memcpy(&itemid, in[0].c_str(), 4);
		if(in[0].size() > 4) {
		  
		}
		Item *i = find_item(itemid);
		if(i != NULL) {
			if(i->wear != NotWearable) {
				player.worn_items[i->wear] = *i;
			} else if(i->wield != NotWieldable) {
				player.wielded_items[i->wield] = *i;
			} else {
				// error, not wieldable or wearable item.
			}
		}
		std::string wi;
		wi += to_value(InventoryCommand);
		wi += to_value(WearItem);
		wi.append(in[0].c_str(),4);
		
		
	  }
	  // Just put the item on
      } else {
	  // Do level checks
      }
}
INET_CALLBACK(InventoryCommand, RemoveItem) { 
      if(player.admin) {
	// cursed items? Muahaha.
      } else {
	
      }
}
INET_CALLBACK(InventoryCommand, DropItem) { 
	if(player.admin) {
		// just drop the item.
	} else {
		// search the players inventory, if the item is in the inventory remove from and put on floor.
	}
}

void inet_player::getZoneList(std::vector<std::string>&in){
      std::string output;
      output += to_value(OLC);
      output += to_value(GetZoneList);
      
      std::string &b = in[0];
       #define discern(X) std::string X = non_safe_string_deserialize(b);
      discern(userid);//std::string userid = 
      unsigned int uid = fromstring<unsigned int>(userid);
      std::stringstream qry;
      qry << "select chunkid, locked from PlayerOwnedChunks where PlayerID='"<<uid<<"'";
      database_connection.query(qry.str());
      #define streq(X,Y) std::string X; X.append(lmrow[Y],lengths[Y]); output.append(string_serialize(X)); 
      output.append(string_serialize(userid));
      auto result_rows = database_connection.numrows;
      qry.str("");
      qry << result_rows;
      {std::string tmp = qry.str();
      output.append(string_serialize(tmp));}
      {
	MYSQL_ROW& lmrow = database_connection.row();
	unsigned long *lengths = mysql_fetch_lengths(database_connection.result()); 
	streq(chunkid, 0)
	streq(locked, 1)
      }
      send_text(output, socket);
}
