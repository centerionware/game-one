#ifndef GENERIC_UTILITIES_H
#define GENERIC_UTILITIES_H

#include <OGRE/OgreVector3.h>
#include <OGRE/OgreMeshManager.h>
#include <OGRE/OgreHardwareBufferManager.h>
#include <OGRE/OgreSubMesh.h>
#include <OGRE/OgreMaterial.h>
#include <OGRE/OgreMaterialManager.h>
#include <OGRE/OgreTechnique.h>
#include <OGRE/OgreRoot.h>
#include <OGRE/OgreRenderSystem.h>
#include <OGRE/OgreMeshSerializer.h>

#include <boost/iostreams/filtering_streambuf.hpp>
#include <boost/iostreams/copy.hpp>
#include <boost/iostreams/filter/gzip.hpp>

#include <vector>
#include <string>

using std::string;
struct vec4_vec3;
#define GOREAL float

#include <sstream>
#include <cmath>
union varun {
      int a;
      float b;
      char* c;
      char d;
      unsigned int e;
};

struct Configuration {
  public:
    std::map<const char *, varun> Values;
    varun get_value(const char *i) { 
	    std::map<const char *,varun>::iterator iter = Values.begin(), end = Values.end();
	    for(;iter!=end;iter++) {
		    if( memcmp((*iter).first,i,strlen(i)) == 0 ) return (*iter).second;
	    }
	    std::string err;
	    err.append("Cofiguration value ");
	    err.append(i);
	    err.append(" not found.");
	    throw err.c_str();
	    varun nd;
	    return nd;
    }
    
};

struct configfile {
  std::map<std::string,std::string> configfilevars;
  void readconfigfile() {
	configfilevars.clear();
	std::ifstream configfile("g1config.conf");
	if(configfile.is_open()) {
	    string line;
	    while(configfile.good()) {
	     std::getline( configfile, line);
	     if(line.size()!=0) {
	      bool eqfnd=false;
	      size_t i = 0;
	      for(; i<line.size();++i) if( line[i] == '=' ) { eqfnd=true; break; }
	      if(eqfnd) {
		std::string a = line.substr(0,i++),
			    b = line.substr(i,line.size()-i);
		configfilevars[a]=b;
	      }
	     }
	    }
	}
    }
   void writeconfigfile() {
      std::ofstream outfile("g1config.conf", std::ios_base::out);
      if(outfile.is_open()) {
	    std::string o;
	    for(auto i = configfilevars.begin(), e = configfilevars.end(); i!=e;++i){
	      o.append( (*i).first );
	      o.append( "=");
	      o.append( (*i).second);
	      outfile << o << std::endl;
	    }
	    outfile.close();
      }
    }
    configfile() { readconfigfile(); }
    ~configfile() { writeconfigfile(); }
};
struct autosaver {
    static configfile configfilemgmt;
    void load() {
      std::string a = Name(), &b = Value();
      if(configfilemgmt.configfilevars.find(a) != configfilemgmt.configfilevars.end()) b = configfilemgmt.configfilevars[a];
      
    }
    void save() {
      std::string a = Name(), b = Value();
      configfilemgmt.configfilevars[a]=b;
    }
    virtual std::string Name()=0;
    virtual std::string &Value()=0;
};
inline double sym_round_internal(double &r) {
     return (r > 0.0) ? floor(r + 0.5) : ceil(r - 0.5);
}
inline double sym_round(double r) {
    r = sym_round_internal(r);
    if(r == -0) r = 0;
    return r;//sym_round_internal(r);
}

extern Configuration Global_Configuration;
inline string ftoa(const GOREAL v) {
      std::ostringstream x;
      x << v;//sort  by relative location to camera ogre3d
      return x.str();
}
template<typename T> string tostring(T v) {
       std::ostringstream x;
      x << v;//sort  by relative location to camera ogre3d
      return x.str();
}
template<typename T>
T fromstring(string s) {
 std::istringstream f(s);
 T ans;
 f >> ans;
 // validation omitted
 return ans;
}
template<typename T>
T fromstring(const char*sc, size_t length) {
  string s;
 s.append(sc,length);
 std::istringstream f(s);
 T ans;
 f >> ans;
 // validation omitted
 return ans;
}
// This will generate a function that can compare two vectors (of different types) for example, internal vec3 and ogre::Vector3

template<typename t, typename x>
GOREAL _get2d_vecdist(const t &p, const x&y) {
		using std::pow;
		return std::sqrt( pow(p.x-y.x,2)+pow(p.z-y.z,2) );
	}

template<typename t, typename x>
GOREAL _get2d_vecdistref(const t &p, const x&y) {
		using std::pow;
		return std::sqrt( pow(p.x-y.x,2)+pow(p.z-y.z,2) );
}
	
	
template<typename T, typename X>
GOREAL _get3d_vecdistref(const T &p, const X&y) {
		using std::pow;
		//T p = _p>_y?_p:_y;
		//X y = p==_y?_p:_y;
		
		return std::sqrt( pow(p.x-y.x,2)+pow(p.y-y.y,2)+pow(p.z-y.z,2) );
	}
	
/*
template<typename t, typename x>
GOREAL _get2d_vecdist(t p, x y) {
		GOREAL c_x = p.x-y.x;
		GOREAL c_y = p.z-y.z;
		return Ogre::Math::Sqrt( (c_x*c_x)+(c_y*c_y));
	}*/
#define get_distance(X,Y) (_get2d_vecdist(X,Y))
#define f3ToOgre(X,Y,Z) (Ogre::Vector3(X,Y,Z))

struct vec4_vec3_vector {
      std::vector<vec4_vec3>triangles;
};
struct vec3 {
    //  GOREAL _int[3]; //This ensures contiguousity in memory so memcmp and memcpy work as expected.
      GOREAL  x, y, z; 
   //   boost::shared_ptr<vec4_vec3_vector> tt; // to reduce (de)constructor calls for std::vector when it's not even being used...
      vec3() {memset(this, 0, sizeof(*this));};
      vec3(const Ogre::Vector3&_i)  {
		  memset(this, 0, sizeof(*this));
		  x=_i.x, y=_i.y, z=_i.z;
	  }
      template<class T, class U, class V>vec3(T _x, U _y, V _z) {
		  memset(this, 0, sizeof(*this));
		  x=_x, y=_y, z=_z;
	  }
      inline void floor() {
	      x = std::floor(x);
	      y = std::floor(y);
	      z = std::floor(z);
      }
      inline void ceil() {
	      x = std::ceil(x);
	      y = std::ceil(y);
	      z = std::ceil(z);
      }
      inline vec3& sym_round() {
	      x = ::sym_round(x);
	      y = ::sym_round(y);
	      z = ::sym_round(z);
	      return *this;
      }
      vec3 abs() {
	    return vec3(std::abs(x),std::abs(y),std::abs(z));
      }
      float total() { return x+y+z; }
      Ogre::Vector3 toOgre() {
	      Ogre::Vector3 ret(x,y,z);
	      return ret;
      }
      ~vec3() {/* if(tt != NULL) { delete tt; tt=NULL; } */}
      void switch_y_z() {
	    GOREAL t = y;
	    y = z;
	    z = t;
      }
      vec3(const vec3&p) {
		  memset(this, 0, sizeof(*this));
		memcpy(this, &p, sizeof(GOREAL)*3);
      }
      vec3 & operator=(const vec3 &o) {
	      memcpy(this, &o, sizeof(GOREAL)*3);
	      return *this;
      } 
      vec3 & operator=(const float o) {
	     x=o,y=o,z=o;
	      return *this;
      } 
      inline string print(string extra = "Unnamed vector") {
			return extra + " x (" + ftoa(x) + ") y (" + ftoa(y) + ") z (" + ftoa(z) + ") ";
      }
      inline void set(const GOREAL a,const GOREAL b,const GOREAL c) {
	      x = (a);
	      y = (b);
	      z = (c);  
      }
      inline bool operator==(const vec3 &other) const {
	    return memcmp(this,&other,sizeof(GOREAL)*3) == 0 ? true : false; //(other.x == x && other.y == y && other.z == z);
      }
      inline bool operator!=(const vec3 &other) const {
	    return memcmp(this,&other,sizeof(GOREAL)*3) == 0 ? false : true;
      }
      inline bool operator<(const vec3 &other) const {
	    return memcmp(this,&other,sizeof(GOREAL)*3) < 0 ? true : false ;// x!=other.x ? x<other.x : (y!=other.y ? y<other.y : z < other.z ) ;
      }
      inline bool operator<=(const vec3 &other) const {
	    return memcmp(this,&other,sizeof(GOREAL)*3) >= 0 ? true : false ;//x!=other.x ? x<other.x : (y!=other.y ? y<other.y : z <=other.z );
      }
       inline bool operator>=(const vec3 &other) const {
	    return memcmp(this,&other,sizeof(GOREAL)*3) <= 0 ? true : false ;//x!=other.x ? x<other.x : (y!=other.y ? y<other.y : z <=other.z );
      }
      inline bool operator>(const vec3 &other) const {
	    return memcmp(this,&other,sizeof(GOREAL)*3) > 0 ? true : false ;//x!=other.x ? x>other.x : (y!=other.y ? y>other.y : z > other.z ) ;
      }
      inline vec3 get_normal() {
	     Ogre::Vector3 _mvec(x,y,z);
	     Ogre::Vector3 nvec = _mvec.normalisedCopy();
	    return vec3(nvec.x, nvec.y, nvec.z);
      }
       inline vec3 operator+(const vec3 other) const {
	    return vec3(x + other.x, y + other.y,  z + other.z);
      }
      
      inline const vec3& operator+=(const int other) {
	    this->x += other;
	    this->y += other;
	    this->z += other;
	    return *this;
      }
      
      inline const vec3& operator+=(float &other) {
	    this->x += other;
	    this->y += other;
	    this->z += other;
	    return *this;
      }
      inline const vec3& operator+=(const vec3 &other) {
	    this->x += other.x;
	    this->y += other.y;
	    this->z += other.z;
	    return *this;
      }
      inline bool inrange(float a, float b) {
	return (x >=a && x <= b && y >=a && y <= b && z >=a && z <= b);
      }
      inline vec3 ignore_y() {
		return vec3(x,0.0,z);
      }
      inline vec3 operator-(const vec3 &other) const {
	    return vec3(x - other.x, y - other.y,  z - other.z);
      }
      inline vec3 operator*(const vec3 other) const {
	    return vec3(x*other.y, y*other.y, z*other.z);
      }
      template<class T>
      inline vec3 operator*(const T other) const {
	    return vec3(x*other,y*other,z*other);
      }
     
      inline vec3 operator/(const vec3 other) const {
	    return vec3(x/other.x, y/other.y, z/other.z);
      }
      inline vec3 div(const vec3 other) const {
          return vec3(x/other.x, y/other.y, z/other.z);
      }
      template<class T>
       inline vec3 operator/(const T other) {
	    return vec3(x/other,y/other,z/other);
      }
      inline vec3 cross_product(const vec3 &other) const {
	    const float &Ax = x, &Ay = y, &Az=z;
	    const float &Bx = other.x, &By = other.y, &Bz = other.z;
	    return vec3(Ay*Bz - By*Az, Bx*Az - Ax*Bz, Ax*By - Ay*Bx);
      }
      inline float dot_product(const vec3 &other) const { return (x*other.x)+(y*other.y)+(z*other.z);}
      inline GOREAL length() {
	      return Ogre::Math::Sqrt( (x*x) + (y*y) + (z*z) );
      }
};

struct vec4_vec3 {
	vec3 *a, *b, *c, *d;
	
	vec4_vec3() {}
	vec4_vec3(vec3*_a,vec3*_b,vec3*_c,vec3*_d) : a(_a),b(_b),c(_c),d(_d) {}

	bool operator==(const vec3 &other) const {
	    if(other == *a || other == *b || other == *c || other == *d) return true;
	    return false;
      }
};
struct tvec4_vec3 {
	vec3 a, b, c, d;
	tvec4_vec3() {
	}
	
	bool operator==(const vec3 &other) const {
	    if(other == a || other == b || other == c || other == d) return true;
	    return false;
      }
};

inline GOREAL _get2d_vecdist(const vec3 p, const vec3 &y) {
		using std::pow;
		return std::sqrt( pow(p.x-y.x,2)+pow(p.z-y.z,2) );
}
// http://www.codeguru.com/forum/archive/index.php/t-201353.html
// This is Anthony's improved version of qsort -A.Mai 7/18/2002

void  Qsort (void *base,unsigned num,unsigned width,int (*comp)(const void *, const void *));

struct vec9x3 {
	vec3 _int[9][3];
	vec9x3(vec3 in) {
		for(int x = 0; x < 9; ++x) for(int y = 0; y < 3; ++y) _int[x][y] = in;
	}
	vec9x3() {
		vec3 tmp[9][3] = {
			{vec3(-1, -1, -1), vec3(-1, -1, 0),vec3(-1, -1, 1) }, // Bottom row
			{vec3(0, -1, -1),vec3(0, -1, 0),vec3(0, -1, 1)}, // Bottom row
			{vec3(1, -1, -1),vec3(1, -1, 0),vec3(1, -1, 1)},// Bottom row
			{vec3(-1, 0, -1),vec3(-1, 0, 0),vec3(-1, 0, 1)},// Mid row
			{vec3(0, 0, -1),vec3(0, 0, 0),vec3(0, 0, 1)}, // Mid row
			{vec3(1, 0, -1),vec3(1, 0, 0),vec3(1, 0, 1)}, // Mid row
			{vec3(-1, 1, -1),vec3(-1, 1, 0),vec3(-1, 1, 1)}, // Top row
			{vec3(0, 1, -1),vec3(0, 1, 0),vec3(0, 1, 1)}, // Top row
			{vec3(1, 1, -1),vec3(1, 1, 0),vec3(1, 1, 1)} // Top row
		};
		for(int x = 0; x < 9; ++x) for(int y = 0; y < 3; ++y) _int[x][y] = tmp[x][y];
	}
	vec9x3(const vec9x3 &o) {
	  for(int x = 0; x < 9; ++x) for(int y = 0; y < 3; ++y) _int[x][y] = o._int[x][y];
	}
	inline const vec9x3 & operator+=(const vec9x3 &rhs){
	    for(int x = 0; x < 9; ++x) for(int y = 0; y < 3; ++y) _int[x][y] += rhs._int[x][y];
	    return *this;
	}
	vec9x3 operator*(const vec3 in) const{
		vec9x3 r;
		for(int x = 0; x < 9; ++x) for(int y = 0; y < 3; ++y) r._int[x][y] = _int[x][y] * in;
		return r;
	}
	vec9x3 operator*(const vec9x3 &in) const{
		vec9x3 r;
		for(int x = 0; x < 9; ++x) for(int y = 0; y < 3; ++y) r._int[x][y] = _int[x][y] * in._int[x][y];
		return r;
	}
	vec9x3 operator+(const vec3 in) const{
		vec9x3 r;
		for(int x = 0; x < 9; ++x) for(int y = 0; y < 3; ++y) r._int[x][y] = _int[x][y] + in;
		return r;
	}
	//MyClass MyClass::operator + ( const MyClass& rhs ) const
	const vec9x3 operator+(const vec9x3& in){
		return vec9x3(*this)+=in;
		vec9x3 r;
		for(int x = 0; x < 9; ++x) for(int y = 0; y < 3; ++y) r._int[x][y] = _int[x][y] + in._int[x][y];
		return r;
	}
	const vec9x3 operator+(const vec9x3& in) const;
	
	
};
inline std::string gzip_compress_string(std::string&in) {
	std::string compressed;
	std::stringstream myfile;
	std::stringstream myfile2;
	myfile << in;
	boost::iostreams::filtering_streambuf<boost::iostreams::input> out;
	out.push(boost::iostreams::gzip_compressor());
	out.push(myfile);
	boost::iostreams::copy(out,myfile2);
	compressed = myfile2.str();
	return compressed;
}
inline std::string gzip_decompress_string(std::string&in_p) {
  	std::string decompressed;
	
		std::stringstream lmd;
		lmd << in_p;
		std::stringstream myfile;
		boost::iostreams::filtering_streambuf<boost::iostreams::input> in;
		in.push(boost::iostreams::gzip_decompressor());
		in.push(lmd);
		boost::iostreams::copy(in,myfile);
		decompressed = myfile.str();
	
	return decompressed;
}
extern vec9x3 voxel_neighbors;//[9][3];
#include <boost/shared_array.hpp>
template<class T>
boost::shared_array<vec3*> arr_93_mul(vec3 *array, T amt) {
	boost::shared_array<vec3*>threadsafe_result_container = new vec3[9][3];
	for(int x = 0; x < 9; ++x) for(int i = 0; i < 3; ++i) threadsafe_result_container[x][i] = array[i+(9*x)]*amt;
	return threadsafe_result_container;
	
}
extern std::string string_serialize(const std::string &i);
extern std::string non_safe_string_deserialize(std::string &i);
/* Safe because it doesn't modify arguments */
/* Via copying the argument incoming so that non-safe doesn't change the one called with */
extern std::string safe_string_deserialize(std::string i);
#endif
