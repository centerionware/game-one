
//http://www.tenouk.com/Module41.html

/*******select.c*********/
/*******Using select() for I/O multiplexing */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include "inet.h"
#include "command.h"
#include "database_utilities.h"
#include "server-map.h"
/* port we're listening on */
#define PORT 6720

std::vector<Ogre::FrameListener*> Removed_Frame_Listeners; //unused in this binary. required for linking.
int main(int argc, char *argv[])
{
	NewHeightmapLoader::hm_instance = new NewHeightmapLoader();// &HM_INSTANCE;
	/* master file descriptor list */
	fd_set master;
	/* temp file descriptor list for select() */
	fd_set read_fds;
	/* server address */
	struct sockaddr_in serveraddr;
	/* client address */
	struct sockaddr_in clientaddr;
	/* maximum file descriptor number */
	int fdmax;
	/* listening socket descriptor */
	int listener;
	/* newly accept()ed socket descriptor */
	int newfd;
	/* buffer for client data */
	char buf[1024];
	int nbytes;
	/* for setsockopt() SO_REUSEADDR, below */
	int yes = 1;
	socklen_t addrlen;
	int i;//, j;
	struct timeval timeout;
	/* clear the master and temp sets */
	FD_ZERO(&master);
	FD_ZERO(&read_fds);
	database_connection.setup("localhost","gameone","gameonedbpassword","GameOne");
	/* get the listener */
	if((listener = socket(AF_INET, SOCK_STREAM, 0)) == -1)
	{
		perror("Server-socket() error lol!");
		/*just exit lol!*/
		exit(1);
	}
	printf("Server-socket() is OK...\n");
	/*"address already in use" error message */
	if(setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int)) == -1)
	{
		perror("Server-setsockopt() error lol!");
		exit(1);
	}
	printf("Server-setsockopt() is OK...\n");
	 /*************************************************************/
	/* Set socket to be non-blocking.  All of the sockets for    */
	/* the incoming connections will also be non-blocking since  */
	/* they will inherit that state from the listening socket.   */
	/*************************************************************/
	int on = 1;
	on = ioctl(listener, FIONBIO, (char *)&on);
	if (on < 0)
	{
		perror("set socket as nonblocking ioctl() failed");
		close(listener);
		exit(-1);
	}
	timeout.tv_sec = 0;
	timeout.tv_usec = 100000;
	/* bind */
	serveraddr.sin_family = AF_INET;
	serveraddr.sin_addr.s_addr = INADDR_ANY;
	serveraddr.sin_port = htons(PORT);
	memset(&(serveraddr.sin_zero), '\0', 8);
	
	if(bind(listener, (struct sockaddr *)&serveraddr, sizeof(serveraddr)) == -1)
	{
	    perror("Server-bind() error lol!");
	    exit(1);
	}
	printf("Server-bind() is OK...\n");
	
	/* listen */
	if(listen(listener, 10) == -1)
	{
	    perror("Server-listen() error lol!");
	    exit(1);
	}
	printf("Server-listen() is OK...\n");
	
	/* add the listener to the master set */
	FD_SET(listener, &master);
	/* keep track of the biggest file descriptor */
	fdmax = listener; /* so far, it's this one*/
	Ogre::Timer time_of_ticks;
	Ogre::Timer sql_keepalive_timer;
	sql_keepalive_timer.reset();
	unsigned long last_frame_time = 0;
	Ogre::Timer clear_terrain_timer;
	clear_terrain_timer.reset();
	/* loop */
	for(;;)
	{
		/* copy it */
		read_fds = master;
		
		if(select(fdmax+1, &read_fds, NULL, NULL, &timeout) == -1)
		{
			
			
			perror("Server-select() error lol!");
			exit(1);
		}
		timeout.tv_usec=100000;
		timeout.tv_sec=0;
		run_player_server_movements();
		if(clear_terrain_timer.getMilliseconds() > 25000){ 
			  clear_terrain_not_close_to_players();
			  clear_terrain_timer.reset();
		}
		unsigned long int ttime = time_of_ticks.getMilliseconds();
		tick_server(last_frame_time, ttime);
		last_frame_time = ttime;
		tick_login_queue(master);
		if(sql_keepalive_timer.getMilliseconds() > 27000000) { // 7.5 hours
			sql_keepalive_timer.reset();
			database_connection.query("show databases");
		}
	//	printf("Server-select() is OK...\n");
		
		/*run through the existing connections looking for data to be read*/
		for(i = 0; i <= fdmax; ++i)
		{
			if(FD_ISSET(i, &read_fds))
			{ /* we got one... */
				if(i == listener)
				{
					/* handle new connections */
					addrlen = sizeof(clientaddr);
					if((newfd = accept(listener, (struct sockaddr *)&clientaddr, &addrlen)) == -1)
					{
						perror("Server-accept() error lol!");
					}
					else
					{
						printf("Server-accept() is OK...\n");
						
						FD_SET(newfd, &master); /* add to master set */
						if(newfd > fdmax)
						{ /* keep track of the maximum */
						    fdmax = newfd;
						}
						player_login_queue(newfd);
						
						printf("%s: New connection from %s on socket %d\n", argv[0], inet_ntoa(clientaddr.sin_addr), newfd);
					}
				}
				else
				{
					/* handle data from a client */
					if((nbytes = recv(i, buf, sizeof(buf), 0)) <= 0)
					{
						/* got error or connection closed by client */
						if(nbytes == 0)
						/* connection closed */
							printf("%s: socket %d hung up\n", argv[0], i);
						
						else
							perror("recv() error lol!");
						
						/* close it... */
						if(find_player(i)) {
						find_player(i)->broadcastNearby(RemPlayer); // sends a global broadcast.
						remove_player(i);
						}
						close(i);
						/* remove from master set */
						FD_CLR(i, &master);
					} 
					else
					{
						std::string b;
						b.append(buf, nbytes);
						//std::cout << "Nbytes recieved: " << nbytes << std::endl;
						inet_player *lplayer = find_player(i);
						if(lplayer){
							lplayer->recv_text(b);
							if(lplayer->deleteMe) {
								std::cout << "Remove player bit set\n";
								remove_player(i);
								//close(i);
							}
						}else {
						      // login queue
							std::cout << "Login Queue Recieve\n";
						      login_queue_receive(i,b,master);
						}
					}
				}
			}
		}
		
	}
	return 0;
}


/*
//
// adapted from async_udp_echo_server.cpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2008 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#include <cstdlib>
#include <iostream>
#include <boost/bind.hpp>
#include <boost/asio.hpp>

using boost::asio::ip::udp;
class tcp_connection
  : public boost::enable_shared_from_this<tcp_connection>
{
public:
  typedef boost::shared_ptr<tcp_connection> pointer;

  static pointer create(boost::asio::io_service& io_service)
  {
    return pointer(new tcp_connection(io_service));
  }

  tcp::socket& socket()
  {
    return socket_;
  }

  void start()
  {
    message_ = make_daytime_string();

    boost::asio::async_write(socket_, boost::asio::buffer(message_),
        boost::bind(&tcp_connection::handle_write, shared_from_this()));
  }
  void send(std::string &output) {
	boost::asio::async_write(socket_, boost::asio::buffer(output),
        boost::bind(&tcp_connection::handle_write, shared_from_this()));
  }
private:
  tcp_connection(boost::asio::io_service& io_service)
    : socket_(io_service)
  {
  }

  void handle_write()
  {
  }

  tcp::socket socket_;
  std::string message_;
};

class tcp_server
{
public:
  tcp_server(boost::asio::io_service& io_service, short port)
    : acceptor_(io_service, tcp::endpoint(tcp::v4(), port))
  {
    start_accept();
  }

private:
  void start_accept()
  {
    tcp_connection::pointer new_connection =
      tcp_connection::create(acceptor_.io_service());

    acceptor_.async_accept(new_connection->socket(),
        boost::bind(&tcp_server::handle_accept, this, new_connection,
          boost::asio::placeholders::error));
  }

  void handle_accept(tcp_connection::pointer new_connection,
      const boost::system::error_code& error)
  {
    if (!error)
    {
    //  new_connection->start();
      players.push_back(new_connection);
      start_accept();
    }
  }

  tcp::acceptor acceptor_;
};

class server
{
public:
  server(boost::asio::io_service& io_service, short port)
    : io_service_(io_service),
      socket_(io_service, udp::endpoint(udp::v4(), port))
  {
    socket_.async_receive_from(
        boost::asio::buffer(data_, max_length), sender_endpoint_,
        boost::bind(&server::handle_receive_from, this,
          boost::asio::placeholders::error,
          boost::asio::placeholders::bytes_transferred));
  }

  void handle_receive_from(const boost::system::error_code& error,
      size_t bytes_recvd)
  {
    if (!error && bytes_recvd > 0)
    {
      socket_.async_send_to(
          boost::asio::buffer(data_, bytes_recvd), sender_endpoint_,
          boost::bind(&server::handle_send_to, this,
            boost::asio::placeholders::error,
            boost::asio::placeholders::bytes_transferred));
    }
    else
    {
      socket_.async_receive_from(
          boost::asio::buffer(data_, max_length), sender_endpoint_,
          boost::bind(&server::handle_receive_from, this,
            boost::asio::placeholders::error,
            boost::asio::placeholders::bytes_transferred));
    }
  }

  void handle_send_to(const boost::system::error_code& error, size_t bytes_sent)
  {
    socket_.async_receive_from(
        boost::asio::buffer(data_, max_length), sender_endpoint_,
        boost::bind(&server::handle_receive_from, this,
          boost::asio::placeholders::error,
          boost::asio::placeholders::bytes_transferred));
  }

private:
  boost::asio::io_service& io_service_;
  udp::socket socket_;
  udp::endpoint sender_endpoint_;
  enum { max_length = 1024 };
  char data_[max_length];
};

int main(int argc, char* argv[])
{
  try
  {
    if (argc != 2)
    {
      std::cerr << "Usage: async_udp_echo_server <port>\n";
      return 1;
    }

    boost::asio::io_service io_service;

    using namespace std; // For atoi.
    server s(io_service, atoi(argv[1]));

    io_service.run();
  }
  catch (std::exception& e)
  {
    std::cerr << "Exception: " << e.what() << "\n";
  }

  return 0;
}
*/
