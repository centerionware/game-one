/*
-----------------------------------------------------------------------------
Filename:    GameOneTest.cpp
-----------------------------------------------------------------------------

This file is the main file for the client. 
Ogre QuickGUI should be great for this.

This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.7.x Application Wizard for KDevelop 4 (March 2011)
      http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/
#include <stddef.h>
#include "CEGUI.h"
#include "GameOneTest.h"
#include "dotscene/dotscene.h"
#include "server-map.h"
//std::vector<Ogre::FrameListener*> Removed_Frame_Listeners;
using namespace Ogre;
//-------------------------------------------------------------------------------------
GameOneTest::GameOneTest(void)
{
}
//-------------------------------------------------------------------------------------
GameOneTest::~GameOneTest(void)
{
}

//-------------------------------------------------------------------------------------
void GameOneTest::createScene(void)
{
   std::string heightmap = "../data/converted_heightmap.voxmap.gz";
    create_server_heightmap(heightmap);

    Ogre::DotSceneLoader dot_load;
    dot_load.parseDotScene("zombie_02.scene", "General",  mSceneMgr);
 
    // Set ambient light
	mSceneMgr->setAmbientLight(Ogre::ColourValue(0.5, 0.5, 0.5));
    mSceneMgr->setSkyDome(true, "Examples/CloudSky",35,5,400,false);
    mSceneMgr->setAmbientLight(Ogre::ColourValue(0.5, 0.5, 0.5));

    // Create a light
    Ogre::Light* l = mSceneMgr->createLight("MainLight");
    l->setPosition(20,80,50);
}



#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
    int main(int argc, char *argv[])
#endif
    {
        // Create application object
        GameOneTest app;

        try {
            app.go();
        } catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
#endif
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
