#define IS_A_SERVER
//http://www.tenouk.com/Module41.html

/*******select.c*********/
/*******Using select() for I/O multiplexing */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include "inet.h"

#include "command.h"
#include "database_utilities.h"
#include "server-map.h"
/* port we're listening on */
struct ServerControl {
      void on_accept(int fd) {
	player_login_queue(fd);
      }
      void on_recv(int fd, std::string&data, fd_set &master){ 
	inet_player *lplayer = find_player(fd);
	if(lplayer){
		lplayer->recv_text(data);
		if(lplayer->deleteMe) {
			std::cout << "Remove player bit set\n";
			remove_player(fd);
			//close(i);
		}
	}else {
	      // login queue
		std::cout << "Login Queue Recieve\n";
		login_queue_receive(fd,data,master);
	}
      }
      void on_close(int fd) {
	if(find_player(fd)) {
	    find_player(fd)->broadcastNearby(RemPlayer); // sends a global broadcast.
	    remove_player(fd);
	}
      }
      void on_full(int newfd) {
	send(newfd, "Full\0",5,MSG_NOSIGNAL);
      }
};

std::vector<Ogre::FrameListener*> Removed_Frame_Listeners; //unused in this binary. required for linking.
extern int spawn_server_and_pass_control(int MAX_PLAYERS, int PORT, server_functor_base &on_accept, server_functor_base &on_close, server_functor_base &on_recv,server_functor_base &on_full);
int main(int argc, char *argv[])
{
  	if(argc<2) {std::cout << "Not enough arguments! Must provide port number!"<<std::endl;return 1;}
	std::stringstream io;
	io << argv[1];
	int PORT = 6720;
	io >> PORT;
	int MAX_PLAYERS=2048; // Arbitrarily picked. If we ever actually reach this many players, try raising it. Though current hardware would be strained anyway/
	if(argc==3) {
	    io.str("");
	    io << argv[2];
	    io >> MAX_PLAYERS;
	}
	  ServerControl pl;
	  ServerFunctor<ServerControl> onaccept(&pl, &ServerControl::on_accept);
	  ServerFunctor<ServerControl> onclose(&pl, &ServerControl::on_close);
	  ServerFunctor<ServerControl> onrecv(&pl, &ServerControl::on_recv);
	  ServerFunctor<ServerControl> onfull(&pl, &ServerControl::on_full);
	  
	  spawn_server_and_pass_control(0,6720, onaccept,onclose,onrecv,onfull);
}
