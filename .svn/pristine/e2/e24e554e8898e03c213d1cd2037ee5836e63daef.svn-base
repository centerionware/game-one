
	OgreObjectWrapper::OgreObjectWrapper(const char *name, const char *group) : need_resize(true),curIntCnt(0) {
		msh = Ogre::MeshManager::getSingleton().createManual(name, group);
		std::stringstream sm_name;
		sm_name << name << "_sm";
		sub = msh->createSubMesh(sm_name.str().c_str());
		sub->setMaterialName("VoxelTexture");
		sub->operationType = Ogre::RenderOperation::OT_POINT_LIST;
		rs = Ogre::Root::getSingleton().getRenderSystem();
		msh->sharedVertexData = new Ogre::VertexData();

		_name = name;
		_group = group;
		entity_loaded = false;
		
	}
	OgreObjectWrapper::~OgreObjectWrapper() {
		//Ogre::HardwareBufferManager::getSingleton()._notifyIndexBufferDestroyed(ibuf.get());
		Ogre::HardwareBufferManager::getSingleton()._notifyVertexBufferDestroyed(vibuf.get());
		Ogre::HardwareBufferManager::getSingleton()._notifyVertexBufferDestroyed(vbuf.get());
		Ogre::MeshManager::getSingleton().remove( msh.get()->getHandle());
	}

	void OgreObjectWrapper::create_ogre_object(GOREAL*vertices,size_t nVertices,Ogre::AxisAlignedBox &_bbox,Ogre::RGBA *colors, bool _export){
		if(nVertices >= curIntCnt) {
			curIntCnt = nVertices*2;
			need_resize = true;
		} else if(nVertices >3 && nVertices >= curIntCnt/3) {
			curIntCnt = nVertices*2;
			need_resize = true;
		} else {need_resize = false; }


		msh->sharedVertexData->vertexCount = nVertices;
		decl = msh->sharedVertexData->vertexDeclaration;
		size_t offset = 0;
		decl->addElement(0, offset, Ogre::VET_FLOAT3, Ogre::VES_POSITION);
		offset += Ogre::VertexElement::getTypeSize(Ogre::VET_FLOAT3);
		if(need_resize) 
			vbuf = Ogre::HardwareBufferManager::getSingleton().createVertexBuffer(offset, curIntCnt, Ogre::HardwareBuffer::HBU_STATIC_WRITE_ONLY);
		vbuf->writeData(0, sizeof(GOREAL)*nVertices, vertices, true);
		
		bind = msh->sharedVertexData->vertexBufferBinding;
		bind->setBinding(0, vbuf);
		offset = 0;
		
		decl->addElement(1, offset, Ogre::VET_COLOUR, Ogre::VES_DIFFUSE);
		offset += Ogre::VertexElement::getTypeSize(Ogre::VET_COLOUR);
		
		if(need_resize)
			vibuf = Ogre::HardwareBufferManager::getSingleton().createVertexBuffer(offset, curIntCnt/3, Ogre::HardwareBuffer::HBU_STATIC_WRITE_ONLY);
		vibuf->writeData(0, sizeof(Ogre::RGBA)*(nVertices/3), colors, true);
		bind->setBinding(1, vibuf);
		msh->_setBounds(_bbox);
		msh->load();
	}
  

//OgreObjectWrapper *OgreObjectWrapper::_stinstance = NULL;