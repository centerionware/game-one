namespace heightmap_globals {
	extern bool volatile alive;
}
extern std::map<vec3, Chunk *> Chunk_Position_Map;
void NewHeightmapLoader::chunk_update(basic_chunk_update& bcu_n) {
  static boost::mutex ncumut;
  generic_single_function_locker chunknorris(ncumut);
  
  /*
      Use this for _ALL_ chunk updating.
  */ 
	basic_chunk &n = bcu_n.chunk;

	vec3 v(n.x,n.y,n.z);
	Chunk *wo=NULL;

	bool inserted = false;
	chunk_iterator_locker itlocker;
	if(chunks._chunks.begin() == chunks._chunks.end()) {
		wo = new Chunk(v);
		wo->id = n.id;
		itlocker.unlock();
		chunks.insert(wo,zerovec);
		itlocker.lock();
		inserted = true;
	}
	auto lf = Chunk_Position_Map.find(v);
	if(lf!=Chunk_Position_Map.end() ) {
		 inserted = true;
		 wo = (*lf).second;//->ele; 
	}
	itlocker.unlock();
	if(!inserted) {
		wo = new Chunk(v);
		wo->id = n.id;
		chunks.insert(wo,zerovec);
	}
	
	chunk_lock locker(wo);
	for(size_t count = 0;count != n.voxels.size();++count) {
		unsigned short j = n.voxels[count];
		unsigned char m = n.matids[count];
		if(wo->NewNewVoxels.find(j) == wo->NewNewVoxels.end()) {
		      wo->NewNewVoxels[j]= voxel_attributes(m);
		} else wo->NewNewVoxels[j].matid = m;
	}
	for(size_t count = 0;count != bcu_n.removed_voxels.size();++count) {
		unsigned short j = bcu_n.removed_voxels[count];
		if(wo->NewNewVoxels.find(j) != wo->NewNewVoxels.end()) wo->NewNewVoxels.erase(wo->NewNewVoxels.find(j));
	}
	wo->id = n.id; // don't leave uninitialized!
	wo->lastupdate = bcu_n.timestamp;
	updatets = wo->lastupdate;
	wo->cleanup();
	heightmap_globals::changed = true;
	//heightmap_globals::mut_c.unlock();
}
bool NewHeightmapLoader::needs_chunk_update(size_t id, size_t timestamp) {
  
  static boost::mutex ncumut;
  generic_single_function_locker chunknorris(ncumut);
	updatets = 0;
	Chunk *wo = NULL;
	//bool inserted = false;
	chunk_iterator_locker itlocker;
	if(chunks._chunks.begin() == chunks._chunks.end()) {
	  std::cout << "There are no chunks!\n";
	  return true;
	}
	auto lt = chunks.find_closest_above_exact_byid(id);
	
	if(lt != chunks.id_sorted.end()) wo = (*lt);
	else  return true;
	if(wo->id != id) return true;
	
	itlocker.unlock();
	if(wo == NULL) return true;
	chunk_lock locker(wo);//wo->temporal_lock();
	updatets = wo->lastupdate;
	//wo->temporal_unlock();

	if(updatets < timestamp) return true;
	return false;
}