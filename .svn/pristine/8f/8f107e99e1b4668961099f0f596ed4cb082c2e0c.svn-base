/*
-----------------------------------------------------------------------------
Filename:    Game_One.cpp
-----------------------------------------------------------------------------

This file is the main file for the client. 
Ogre QuickGUI should be great for this.

This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.7.x Application Wizard for KDevelop 4 (March 2011)
      http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/
#include <stddef.h>
#include "CEGUI.h"
#include "Game-One.h"
#include "dotscene/dotscene.h"
#include "server-map.h"
//std::vector<Ogre::FrameListener*> Removed_Frame_Listeners;
#include "CEGUI.h"
#include <CEGUI/RendererModules/Ogre/CEGUIOgreRenderer.h>


using namespace Ogre;

//-------------------------------------------------------------------------------------

Game_One::Game_One(void)
{
}

//-------------------------------------------------------------------------------------

Game_One::~Game_One(void)
{
}

CEGUI::MouseButton Game_One::convertButton( OIS::MouseButtonID buttonID )
{
    switch(buttonID)
    {
	case OIS::MB_Left:
	{
	    return CEGUI::LeftButton;
	}
	
	case OIS::MB_Right:
	{
	    return CEGUI::RightButton;
	}
	
	case OIS::MB_Middle:
	{
	    return CEGUI::MiddleButton;
	}
	 
	default:
	{
	    return CEGUI::LeftButton;
	}
    }
}

void Game_One::createFrameListener(void) 
{ 
    Ogre::LogManager::getSingletonPtr()->logMessage("*** Initializing OIS ***"); 
    size_t windowHnd = 0; 
    
    std::ostringstream windowHndStr; 
    mWindow->getCustomAttribute("WINDOW", &windowHnd);
    windowHndStr << windowHnd;
    
    OIS::ParamList pl;
    pl.insert(std::make_pair(std::string("WINDOW"), windowHndStr.str())); 
    
    mInputManager = OIS::InputManager::createInputSystem( pl );  
    mKeyboard = static_cast<OIS::Keyboard*>(mInputManager->createInputObject( OIS::OISKeyboard, true )); 
    mMouse = static_cast<OIS::Mouse*>(mInputManager->createInputObject( OIS::OISMouse, true ));  
    mMouse->setEventCallback(this); 
    mKeyboard->setEventCallback(this);  
    //Set initial mouse clipping size 
    windowResized(mWindow); 
    //Register as a Window listener 
    Ogre::WindowEventUtilities::addWindowEventListener(mWindow, this);  
    mRoot->addFrameListener(this); 
}

//-------------------------------------------------------------------------------------
void Game_One::createScene(void)
{
    //Ogre::Entity* zombie = mSceneMgr->createEntity("Zombie_01", "zombie_one.mesh");
    //Ogre::Entity* zombie_eye_l = mSceneMgr->createEntity("Zombie_eyel", "eye_l.mesh");
    //Ogre::Entity* zombie_eye_r = mSceneMgr->createEntity("Zombie_eyer", "eye_r.mesh");
    //Ogre::SceneNode* headNode = mSceneMgr->getRootSceneNode()->createChildSceneNode();
    std::string heightmap = "../data/heightmap.png";
    create_server_heightmap(heightmap);

    Ogre::DotSceneLoader dot_load;
    dot_load.parseDotScene("zombie_02.scene", "General",  mSceneMgr);
  /*
    Entity* thisEntity = mSceneMgr->createEntity("cc", "ColourCube");
    thisEntity->setMaterialName("Test/ColourTest");
    SceneNode* thisSceneNode = mSceneMgr->getRootSceneNode()->createChildSceneNode();
    thisSceneNode->setPosition(-35, 0, 0);
    thisSceneNode->attachObject(thisEntity);
    */
    // Build the heightmap object
    
    // Load the heightmap object into the rendersystem from it's resources.
    // it's named heightmap in the General group.
    /*
    Entity* thisEntity = mSceneMgr->createEntity("hm", "heightmap");
    thisEntity->setMaterialName("Test/ColourTest");
    SceneNode* tsn = mSceneMgr->getRootSceneNode()->createChildSceneNode();
    tsn->setPosition(0, -35, 0);
    tsn->attachObject(thisEntity);
    
    headNode->attachObject(zombie_eye_l);
    headNode->attachObject(zombie_eye_r);
    headNode->attachObject(zombie);
*/
    // Set ambient light
    mSceneMgr->setAmbientLight(Ogre::ColourValue(0.5, 0.5, 0.5));

    // Create a light
    Ogre::Light* l = mSceneMgr->createLight("MainLight");
    l->setPosition(20,80,50);
}


bool Game_One::frameRenderingQueued(const Ogre::FrameEvent& event ) 
{ 
    return BaseApplication::frameRenderingQueued( event ); 
}

bool Game_One::keyPressed( const OIS::KeyEvent &arg )
{
    CEGUI::System &sys = CEGUI::System::getSingleton(); 
    sys.injectKeyDown(arg.key); 
    sys.injectChar(arg.text); 
    return true;
}

bool Game_One::keyReleased( const OIS::KeyEvent &arg ) 
{
    CEGUI::System &sys = CEGUI::System::getSingleton();
    sys.injectKeyUp(arg.key);
    sys.injectChar(arg.text);
    return true;
}

bool Game_One::mouseMoved( const OIS::MouseEvent &arg ) 
{
    CEGUI::System &sys = CEGUI::System::getSingleton();
    sys.injectMouseMove( arg.state.X.rel, arg.state.Y.rel );
    return true;
}

bool Game_One::mousePressed( const OIS::MouseEvent &arg, OIS::MouseButtonID id ) 
{ 
    CEGUI::System::getSingleton().injectMouseButtonUp( convertButton( id ) );
    return true;
}

bool Game_One::mouseReleased( const OIS::MouseEvent &arg, OIS::MouseButtonID id ) 
{ 
    CEGUI::System::getSingleton().injectMouseButtonDown( convertButton( id ) );
    return true;
}

bool Game_One::quit(const CEGUI::EventArgs &e) 
{
    return true; 
}
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
    int main(int argc, char *argv[])
#endif
    {
        // Create application object
        Game_One app;

        try {
            app.go();
        } catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
#endif
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
