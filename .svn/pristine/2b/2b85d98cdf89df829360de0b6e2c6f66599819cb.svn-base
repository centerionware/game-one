void inet_player::loginToServer(std::string servername, std::string port, std::string username, std::string password) {
	tcp::resolver resolver(io_service);
	tcp::resolver::query query(servername.c_str(), port.c_str());
	tcp::resolver::iterator iterator = resolver.resolve(query);
	if(m_chatClient != NULL) delete m_chatClient;
	m_chatClient= new chat_client(io_service, iterator);
	m_chatThread.reset( new boost::thread(boost::bind(&boost::asio::io_service::run, &io_service)));
	is_client = true;
}
void inet_player::inet_update_other_players(const Ogre::FrameEvent &evt) {
	auto iter = Players.begin(), end = Players.end();
	for(;iter!=end;++iter) {
		//if( (*iter) == this) continue;//it should be possible now. but don't continue. Run it so cstate_testing doesn't have to.
		(*iter)->frameRenderingQueued(evt);
	}
}
void inet_player::pump_net_messages() {
	while(m_chatClient->msg_queue.size() > 0) {
		//std::cout << "The size of the first message in queue is " << m_chatClient->msg_queue.front().size() << std::endl;
		recv_text(m_chatClient->msg_queue.front());
		
		m_chatClient->msg_queue.pop_front();
	}
}
void inet_player::call_net_command(std::string &c) {
	if(c.size() < 2) return; // error.. all commands are at least 2 bytes.
	char ida,idb;
	std::string arguments;
	if(c.size() > 2) arguments = c.substr(2,c.size()-2);
	ida = c[0];
	idb = c[1];
	//{
	
	//std::ostringstream lp;
	//lp<< "Calling command ida(" << (int)c[0] << ") idb("<<(int)c[1]<<")" ;

	//CState_MainMenu_Login::ReturnInstance()->set_status_message(lp.str());
	//}
//	std::cout << "Ping net command " << (int)ida << " " << (int)idb << " with args sized: " << arguments.size() << std::endl;
	//print_string_as_ints(arguments);
	auto i = Players.begin(), e = Players.end();
	for(;i!=e; ++i) if( (*i).get() == this) {
	myCommandProcessor.Call(ida,idb,arguments, true, *i);
	break;
	}
}
void inet_player::send_updates(net_commands &arg, unsigned int &other_player_socket) { // on the client other_player_socket is ignored.
	if(arg == HeadText) {
		// change head text
		std::string update;
		update += to_value(NetCommand);
		update += to_value(HeadText);
		update.append(headtext);
		send_text(update, other_player_socket);
	}
	if(arg == Position) {
		// change position
		std::string update;
		update += to_value(NetCommand);
		update += to_value(Position);
		static int float_size = sizeof(float);
		char* oneArr = new char[float_size];
		memcpy(oneArr, &actual_target_position.x, float_size);
		update.append(oneArr,float_size);
		memcpy(oneArr, &actual_target_position.y, float_size);
		update.append(oneArr,float_size);
		memcpy(oneArr, &actual_target_position.z, float_size);
		update.append(oneArr,float_size);
		send_text(update, other_player_socket);
		delete[]oneArr;
		//std::cout << "Sent position update: ";
		//print_string_as_ints(update);
	}
}
void inet_player::send_to_server(net_commands arg) { send_updates(arg,socket); }
void inet_player::broadcastNearby(net_commands,unsigned int *) {/* server only.*/}
void inet_player::recv_text(std::string &i) { call_net_command(i); }
void inet_player::send_text(std::string &i, unsigned int &_socketout) {
	unsigned int osize = i.size();
	char sarr[NET_MESSAGE_SIZE];
	memcpy(sarr, &osize,  NET_MESSAGE_SIZE);
	std::string s;
	s.append(sarr, NET_MESSAGE_SIZE);
	s.append(i);
	m_chatClient->write(s);
}
namespace heightmap_globals {
	extern boost::mutex synchingchunk;
	extern bool volatile alive;
};
void inet_player::clientChunkPush(std::vector<std::string>&in) {
	heightmap_globals::synchingchunk.lock();
	if(heightmap_globals::alive == false) {heightmap_globals::synchingchunk.unlock();return; }
	basic_chunk_update chunklee = basic_chunk_update::deserialize(gzip_decompress_string(in[0]));
	basic_chunk_update &chunkbruce = get_cached_copy(chunklee.chunk.id);
	basic_chunk_update &brucelee = chunkbruce.merge(chunklee);
	if(brucelee.timestamp > chunkbruce.timestamp) store_cached_copy(brucelee.serialize(), brucelee.chunk.id);
	NewHeightmapLoader::hm_instance->chunk_update(chunklee);
	heightmap_globals::synchingchunk.unlock();
}